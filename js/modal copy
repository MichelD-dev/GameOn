function editNav() {
  var x = document.getElementById('myTopnav')
  if (x.className === 'topnav') {
    x.className += ' responsive'
  } else {
    x.className = 'topnav'
  }
}
//TODO faire un return (condition) dans les tests validation...
//TODO vider les chanpms après validation
// DOM Elements
const modalbg = document.querySelector('.bground')
const modalBtn = document.querySelectorAll('.modal-btn')
const modalCloseBtn = document.querySelector('.close')
const formData = document.querySelectorAll('.formData')

// launch modal event
modalBtn.forEach(btn => btn.addEventListener('click', launchModal))

// launch modal form
function launchModal() {
  modalbg.style.display = 'block'
  
  // On place le focus sur le premier champ input à l'ouverture de la modale.
  document.getElementById('first').focus()
}

// close modal event
modalCloseBtn.addEventListener('click', closeModal)

// close modal form
function closeModal() {
  modalbg.style.display = 'none'
}

//firstName validation
const firstName = document.getElementById('first')
firstName.addEventListener('blur', () => {
  if (firstName.value.length < 2) {
    errorMessage('first', 'Vous devez indiquer un prénom valide.')
    firstName.focus()
    return false
  } else {
    errorMessage('first', '')
  }
})

// FONCTION MESSAGE D'ERREUR:
// On passe en paramètres l'id de la balise span devant afficher le message d'erreur, et le message correspondant.
const errorMessage = (id, message) => {
  const error = document.getElementById(`${id}-error`)
  error.style.cssText = `
  font-size: 1rem;
  color: red
  `
  // On affiche le message d'erreur reçu en paramètre.
  error.textContent = message
}

// FORM VALIDATION FUNCTION
const validate = e => {
  // prévient le rechargement de la page
  e.preventDefault()

  // FIRSTNAME VALIDATION:
  // On récupère l'élément input prénom.
  const firstName = document.getElementById('first')
  // Si le texte rentré dans l'input fait moins de deux caractères, on affiche un message d'erreur, via la fonction errorMessage.
  if (firstName.value.length < 2) {
    //TODO ajouter validation regex (a/9/_/-/./é)
    errorMessage('first', 'Vous devez indiquer un prénom valide.')
    // On remet le focus sur le champ pour permettre à l'utilisateur de corriger
    firstName.focus()
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si le texte rentré est valide, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('first', '')
  }

  // LASTNAME VALIDATION:
  // On récupère l'élément input nom.
  const lastName = document.getElementById('last')
  // Si le texte rentré dans l'input fait moins de deux caractères, on affiche un message d'erreur, via la fonction errorMessage.
  if (lastName.value.length < 2) {
    errorMessage('last', 'Vous devez indiquer un nom valide.')
    // On remet le focus sur le champ pour permettre à l'utilisateur de corriger.
    lastName.focus()
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si le texte rentré est valide, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('last', '')
  }

  // EMAIL VALIDATION:
  // On récupère l'élément input email.
  const email = document.getElementById('email')
  // En cas de caractères non conformes aux règles Regex établies, on affiche un message d'erreur, via la fonction errorMessage.
  if (!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email.value)) {
    errorMessage('email', 'Vous devez indiquer une adresse mail valide.')
    //On remet le focus sur le champ pour permettre à l'utilisateur de corriger.
    email.focus()
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si le texte rentré est valide, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('email', '')
  }

  // BIRTHDATE VALIDATION:
  // On récupère l'élément input date de naissance.
  const birthDate = document.getElementById('birthdate')
  // En cas d'absence de selection d'une date, on affiche un message d'erreur, via la fonction errorMessage.
  if (!birthDate.value) {
    errorMessage('birthdate', 'Vous devez indiquer une date de naissance.')
    // On remet le focus sur le champ pour permettre à l'utilisateur de corriger.
    birthDate.focus()
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si une date est selectionnée, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('birthdate', '')
  }

  // QUANTITY VALIDATION:
  // On récupère l'élément input quantité.
  const quantity = document.getElementById('quantity')
  if (!quantity.value) {
    errorMessage('quantity', 'Vous devez indiquer un nombre valide.')
    // On remet le focus sur le champ pour permettre à l'utilisateur de corriger.
    quantity.focus()
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si un nombre est selectionné, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('quantity', '')
  }

  // LOCATION VALIDATION:
  // On récupère tous les éléments input location selectionnés dans un tableau, et on affiche un message d'erreur via la fonction errorMessage, si le tableau résultant est vide.
  if (
    //FIXME pas satisfaisant de passer par un tableau, car un seul radio selectionnable...
    document.querySelectorAll('input[name="location"]:checked').length === 0
  ) {
    errorMessage('location', 'Vous devez indiquer un lieu.')
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si le tableau contient un élément selectionné, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('location', '')
  }

  // CGU VALIDATION:
  // On récupère l'élément input checkbox1.
  const cgu = document.getElementById('checkbox1')
  // Si lélément n'est pas coché, on affiche un message d'erreur, via la fonction errorMessage.
  if (!cgu.checked) {
    errorMessage('CGU', "Vous devez accepter les conditions d 'utilisation.")
    // On interrompt la validation en sortant de la fonction validate.
    return
    // Si l'élément est coché, on supprime l'éventuel message d'erreur précédemment affiché, et on passe à la suite du code.
  } else {
    errorMessage('CGU', '')
  }

  // VALIDATION:
  // On récupère l'élément devant afficher le message de confirmation.
  const confirmation = document.getElementById('confirmation-msg')
  //FIXME backticks
  confirmation.textContent = `
    Merci !
    Votre réservation a bien été reçue.`
  confirmation.className = 'visible'
  //FIXME faire plutôt classList.add('visible') puis classList.remove('visible')
  closeModal()
  setTimeout(() => {
    confirmation.className = 'hidden'
  }, 3500) //FIXME delai en css?
}

//TODO Vidage des champs à l'output ou au nouveau input33